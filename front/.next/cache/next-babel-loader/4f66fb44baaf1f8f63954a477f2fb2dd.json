{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분 LOG_IN_REQUEST\n  // return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // 추후 서버로 부터 응답을 받고난 뒤에 순서대로 진행을 해야하기 때문에 call을 사용\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n} // function* watchHello() {\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     }\n// }\n\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchHello)]);\n}\n/*\r\nput - dispatch와 같음\r\ncall - 동기 호출\r\nfork - 비동기 호출\r\n*/","map":{"version":3,"sources":["D:/프로젝트/globaleur/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","watchHello","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAAUC,cAAV,EAA0BC,cAA1B,EAA0CC,cAA1C,QAAgE,kBAAhE;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACA;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMT,IAAI,CAACQ,QAAD,CAAV,CADA,CACsB;;AACtB,UAAMP,GAAG,CAAC;AAAE;AACRS,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOM,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnB,QAAMhB,UAAU,CAACM,cAAD,EAAiBK,KAAjB,CAAhB;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUM,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAACS,UAAD,EAAa,aAAa;AACtC,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH;;AAGD,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,UAAD,CAFE,CAAD,CAAT;AAIH;AAED","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport {  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분 LOG_IN_REQUEST\r\n    // return axios.post('/login');\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI); // 추후 서버로 부터 응답을 받고난 뒤에 순서대로 진행을 해야하기 때문에 call을 사용\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// function* watchHello() {\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//         console.log(3);\r\n//         console.log(4);\r\n//     }\r\n// }\r\n\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function* () {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'BYE_SAGA'\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchHello),\r\n    ]);\r\n}\r\n\r\n/*\r\nput - dispatch와 같음\r\ncall - 동기 호출\r\nfork - 비동기 호출\r\n*/"]},"metadata":{},"sourceType":"module"}