{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHello),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분 LOG_IN_REQUEST\n  // return axios.post('/login');\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // function* watchHello() {\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(2);\n//         console.log(3);\n//         console.log(4);\n//     }\n// }\n\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(HELLO_SAGA,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return delay(1000);\n\n                  case 2:\n                    _context3.next = 4;\n                    return put({\n                      type: 'BYE_SAGA'\n                    });\n\n                  case 4:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchHello)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\n/*\r\nput - dispatch와 같음\r\ncall - 동기 호출\r\nfork - 비동기 호출\r\n*/","map":{"version":3,"sources":["D:/프로젝트/globaleur/front/sagas/user.js"],"names":["login","watchLogin","watchHello","userSaga","all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","type","console","error"],"mappings":";;;;yBAUUA,K;;;yBAcAC,U;;;yBAcAC,U;;;yBAUeC,Q;;AAhDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAAUC,cAAV,EAA0BC,cAA1B,EAA0CC,cAA1C,QAAgE,kBAAhE;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACA;AACH;;AAED,SAAUhB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMQ,IAAI,CAACQ,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AAAE;AACRQ,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMkB;AACVK,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMV,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACM,cAAD,EAAiBZ,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAUE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACS,UAAD;AAAA;AAAA,mCAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB,2BAAMJ,KAAK,CAAC,IAAD,CAAX;;AADyB;AAAA;AAEzB,2BAAMF,GAAG,CAAC;AACNQ,sBAAAA,IAAI,EAAE;AADA,qBAAD,CAAT;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAb,EAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,UAAD,CADE,EAENI,IAAI,CAACH,UAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOf","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport {  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분 LOG_IN_REQUEST\r\n    // return axios.post('/login');\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI); // 추후 서버로 부터 응답을 받고난 뒤에 순서대로 진행을 해야하기 때문에 call을 사용\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// function* watchHello() {\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(2);\r\n//         console.log(3);\r\n//         console.log(4);\r\n//     }\r\n// }\r\n\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function* () {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'BYE_SAGA'\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchHello),\r\n    ]);\r\n}\r\n\r\n/*\r\nput - dispatch와 같음\r\ncall - 동기 호출\r\nfork - 비동기 호출\r\n*/"]},"metadata":{},"sourceType":"module"}